#!/usr/bin/env python3

import glob
import json
import os
import shutil
import sqlite3
import subprocess
import tempfile

import click
from diskcache import Cache

CACHE = Cache(".cache/ff_bookmarks")


def _find_places_sqlite():
    profiles_path = os.path.expanduser(
        "~/Library/Application Support/Firefox/Profiles/*.default-release"
    )
    profile_dirs = glob.glob(profiles_path)
    if not profile_dirs:
        raise ValueError("Could not find Firefox profile directory.")
    profile_dir = profile_dirs[0]
    places_sqlite_path = os.path.join(profile_dir, "places.sqlite")
    if not os.path.isfile(places_sqlite_path):
        raise ValueError("Could not find places.sqlite in Firefox profile directory.")
    return places_sqlite_path

@CACHE.memoize(expire=60 * 60 * 24)
def _query_bookmarks(folder_name):
    database_file = _find_places_sqlite()
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name

    wal_file = database_file + "-wal"
    wal_temp_filename = temp_filename + "-wal"
    try:
        shutil.copy(wal_file, wal_temp_filename)
    except FileNotFoundError:
        pass

    shutil.copy(database_file, temp_filename)

    backup_file = database_file + ".backup"
    shutil.copy(database_file, backup_file)

    conn = sqlite3.connect(temp_filename)
    cursor = conn.cursor()

    cursor.execute(
        "SELECT id FROM moz_bookmarks WHERE title = ? AND type = 2", (folder_name,)
    )
    folder_id = cursor.fetchone()[0]

    cursor.execute(
        """
        SELECT moz_bookmarks.title, moz_places.url
        FROM moz_bookmarks 
        JOIN moz_places ON moz_bookmarks.fk = moz_places.id
        WHERE parent = ?
        ORDER BY moz_bookmarks.dateAdded ASC
    """,
        (folder_id,),
    )

    rows = cursor.fetchall()
    bookmarks = [{"title": row[0], "url": row[1]} for row in rows]
    return bookmarks


@click.group()
def main():
    pass


@main.command()
@click.argument("folder_name", default="Bookmarks Menu")
def get_bookmarks(folder_name):
    bookmarks = _query_bookmarks(folder_name)
    for bookmark in bookmarks:
        print(bookmark)


@main.command()
def open_ko():
    bookmarks = _query_bookmarks("ðŸŽ¬ KO")
    for bookmark in sorted(bookmarks, key=lambda b: b["title"]):
        if not bookmark["title"][0] in "#-":
            url = bookmark["url"]
            try:
                subprocess.check_call(f"navegador '{url}'", shell=True)
            except subprocess.CalledProcessError:
                print(f"could not open {bookmark}")


if __name__ == "__main__":
    main()
